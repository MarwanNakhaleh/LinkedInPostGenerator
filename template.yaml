AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  AccessToken:
    Type: String
  PostTableName:
    Type: String
    Default: LinkedInPosts
  LambdaName:
    Type: String
    Default: LinkedInPoster
  CategoryTableName:
    Type: String
    Default: LinkedInCategories
  GSIUnpostedPosts:
    Type: String
    Default: unpostedPosts
  GSIID:
    Type: String
    Default: ids

Resources:
  LinkedInPosterLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LinkedInPosterLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "dynamodb.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: get-from-db
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:Query"
                  - "dynamodb:UpdateItem"
                Resource:
                  - !GetAtt LinkedInPostTable.Arn
                  - !Join
                    - ""
                    - - "arn:aws:dynamodb:"
                      - !Ref AWS::Region
                      - ":"
                      - !Ref AWS::AccountId
                      - ":table/"
                      - !Ref PostTableName
                      - "/index/"
                      - !Ref GSIUnpostedPosts
              - Effect: Allow
                Action: "dynamodb:Scan"
                Resource:
                  - !GetAtt LinkedInCategoryTable.Arn

  LinkedInEventTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaName
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt LinkedInPosterLambdaSchedule.Arn

  LinkedInEventTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LinkedInEventTriggerRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LinkedInPosterLambda:
    Type: AWS::Serverless::Function
    Description: description
    Properties:
      Handler: main.lambda_handler
      Runtime: python3.9
      CodeUri: .
      Timeout: 30
      FunctionName: !Ref LambdaName
      MemorySize: 128
      Role: !GetAtt LinkedInPosterLambdaRole.Arn
      Environment:
        Variables:
          ACCESS_TOKEN: !Ref AccessToken
          POST_TABLE: !Ref PostTableName
          CATEGORY_TABLE: !Ref CategoryTableName
      Tags:
        ApplicationName: linkedin-poster

  LinkedInPosterLambdaSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "cron(0 16 ? * * *)"
      Targets:
        - Arn: !GetAtt LinkedInPosterLambda.Arn
          Id: "1"
      RoleArn: !GetAtt LinkedInEventTriggerRole.Arn

  LinkedInPostTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      TableName: !Ref PostTableName
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "category"
          AttributeType: "S"
        - AttributeName: "hasBeenPosted"
          AttributeType: "S"
      BillingMode: "PAY_PER_REQUEST"
      ContributorInsightsSpecification:
        Enabled: false
      KeySchema:
        - AttributeName: "id"
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: !Ref GSIUnpostedPosts
          KeySchema:
            - AttributeName: "category"
              KeyType: HASH
            - AttributeName: "hasBeenPosted"
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: !Ref GSIID
          KeySchema:
            - AttributeName: "id"
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      TableClass: "STANDARD"
      Tags:
        - Key: Application
          Value: linkedin-poster

  LinkedInCategoryTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      TableName: !Ref CategoryTableName
      AttributeDefinitions:
        - AttributeName: "category"
          AttributeType: "S"
      BillingMode: "PAY_PER_REQUEST"
      ContributorInsightsSpecification:
        Enabled: false
      KeySchema:
        - AttributeName: "category"
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      TableClass: "STANDARD"
      Tags:
        - Key: Application
          Value: linkedin-poster

Outputs:
  PostTable:
    Description: A reference to the posts table ARN
    Value: !GetAtt LinkedInPostTable.Arn
    Export:
      Name: LinkedInPostTableARN
  CategoryTable:
    Description: A reference to the categories table ARN
    Value: !GetAtt LinkedInCategoryTable.Arn
    Export:
      Name: LinkedInCategoryTableARN
  LambdaPosterArn:
    Description: ARN of the lambda function
    Value: !GetAtt LinkedInPosterLambda.Arn
  EventRuleArn:
    Description: ARN of the lambda function
    Value: !GetAtt LinkedInPosterLambdaSchedule.Arn
