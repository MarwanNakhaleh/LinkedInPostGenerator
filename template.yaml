AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  AccessToken:
    Type: String

Resources:
  LinkedInPosterLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LinkedInPosterLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "dynamodb.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LinkedInPosterLambda:
    Type: AWS::Serverless::Function
    Description: description
    Properties:
      Handler: main.lambda_handler
      Runtime: python3.9
      CodeUri: .
      Timeout: 30
      FunctionName: LinkedInPoster
      MemorySize: 128
      Role: !GetAtt LinkedInPosterLambdaRole.Arn
      Environment:
        Variables:
          ACCESS_TOKEN: !Ref AccessToken
      Tags:
        ApplicationName: linkedin-poster

  LinkedInPostTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "LinkedInPosts"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      BillingMode: "PAY_PER_REQUEST"
      ContributorInsightsSpecification:
        Enabled: false
      KeySchema:
        - AttributeName: "id"
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      TableClass: "STANDARD"
      Tags:
        - Key: Application
          Value: linkedin-poster
